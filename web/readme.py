Форматы сообщений определяют структуру потока байтов, пересылаемых через сокеты во время обмена данными.
Номера портов служат зарезервированными числовыми идентификаторами используемых сокетов, через которые происходит обмен
сообщениями.
Программу, которая выполняется постоянно и ожидает запросы, обычно называют сервером, а соединяющуюся с ней программу – клиентом
Сервер
На компьютере, где хранятся сайты, обычно выполняется программа веб-сервера, постоянно ожидающая входящие запросы соединения на сокете, связанном с портом 80. Часто сам сервер не занимается ничем другим, кроме постоянного ожидания появления запросов
к порту – обработка запросов передается порожденным процессам
или потокам.
Клиенты
Программы, которым нужно поговорить с этим сервером, для инициации соединения указывают имя компьютера сервера и порт 80.
Типичными клиентами веб-серверов являются веб-броузеры, такие
как Firefox, Internet Explorer или Chrome, но открыть соединение со
стороны клиента и получать веб-страницы с сервера может любой
сценарий, указав номер порта 80. Именем компьютера сервера может быть также «localhost», если веб-сервер выполняется на том же
компьютере, что и клиент.
В целом многие клиенты могут подключаться к серверу через сокеты
независимо от того, реализован на нем стандартный протокол или нечто более специфическое для данного приложения
. А в некоторых приложениях понятия клиента и сервера размыты – программы могут обмениваться между собой байтами скорее как равноправные участники,
а не как главный и подчиненный. Например, агенты пиринговых сетей
передачи файлов могут одновременно являться клиентами и серверами
для разных участков передаваемых файлов.стр35
import ftplib
import pickle
import socket

print(gethostbyname(gethostname()))
connection, address = sockobj.accept()
Ждет поступления от клиента нового запроса на соединение. Когда
он поступит, метод accept вернет новый объект сокета, через который можно передавать данные соединившемуся клиенту и получать
их от него. Соединение осуществляет объект sockobj, но связь с клиентом происходит через новый сокет, connection. Этот метод возвращает
кортеж из двух элементов, где address является интернет-адресом соединившегося клиента. Метод accept может вызываться многократно, чтобы обслужить несколько клиентов. Поэтому каждый вызов
возвращает новый сокет, через который происходит связь с конкретным клиентом.
